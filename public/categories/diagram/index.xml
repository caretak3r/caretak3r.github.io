<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diagram on silent.engineer</title>
    <link>http://localhost:1313/categories/diagram/</link>
    <description>Recent content in Diagram on silent.engineer</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 May 2025 07:06:00 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/diagram/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How Does Helm Work? (Diagram)</title>
      <link>http://localhost:1313/posts/how-does-helm-work/</link>
      <pubDate>Tue, 13 May 2025 07:06:00 -0400</pubDate>
      <guid>http://localhost:1313/posts/how-does-helm-work/</guid>
      <description>&lt;div class=&#34;mermaid-container&#34;&gt;&#xA;  &lt;div class=&#34;mermaid-wrapper&#34;&gt;&#xA;    &lt;div class=&#34;mermaid&#34;&gt;%%{init: {&#39;theme&#39;: &#39;base&#39;, &#39;themeVariables&#39;: { &#39;primaryColor&#39;: &#39;#BB2528&#39;, &#39;primaryTextColor&#39;: &#39;#fff&#39;, &#39;primaryBorderColor&#39;: &#39;#7C0000&#39;, &#39;lineColor&#39;: &#39;#F8B229&#39;, &#39;secondaryColor&#39;: &#39;#006100&#39;}}}%%&#xA;graph LR&#xA;    UserInputValues[&#34;User-provided Values&#34;] --&gt; ValueProcessor&#xA;&#xA;    subgraph HelmChart[&#34;Helm Chart Package&#34;]&#xA;        ChartYaml[&#34;Chart.yaml&#34;]&#xA;        ValuesYaml[&#34;values.yaml&#34;]&#xA;        TemplatesDir[&#34;templates/&#34;]&#xA;        ChartsDir[&#34;charts/&#34;]&#xA;        HelpersTpl[&#34;_helpers.tpl&#34;]&#xA;        ResourceTemplates[&#34;Resource Templates&#34;]&#xA;        NotesTxt[&#34;NOTES.txt&#34;]&#xA;        TestDir[&#34;tests/&#34;]&#xA;    end&#xA;&#xA;    subgraph HelmClient[&#34;Helm Client&#34;]&#xA;        HelmInstall[&#34;helm install&#34;]&#xA;        HelmTemplate[&#34;helm template&#34;]&#xA;        HelmUpgrade[&#34;helm upgrade&#34;]&#xA;        HelmLint[&#34;helm lint&#34;]&#xA;        HelmPackage[&#34;helm package&#34;]&#xA;    end&#xA;&#xA;    subgraph HelmEngine[&#34;Helm Engine&#34;]&#xA;        ValueProcessor[&#34;Value Processor&#34;]&#xA;        TemplatingEngine[&#34;Templating Engine&#34;]&#xA;        ReleaseTracker[&#34;Release Tracker&#34;]&#xA;        K8sClient[&#34;K8s API Client&#34;]&#xA;    end&#xA;&#xA;    subgraph K8sCluster[&#34;Kubernetes Cluster&#34;]&#xA;        APIServer[&#34;API Server&#34;]&#xA;        DeployedResources[&#34;Deployed Resources&#34;]&#xA;        ReleaseObject[&#34;Helm Release Object&#34;]&#xA;    end&#xA;&#xA;    ValuesYaml --&gt; ValueProcessor&#xA;    ChartYaml --&gt; TemplatingEngine&#xA;    TemplatesDir --&gt; TemplatingEngine&#xA;    HelpersTpl --&gt; ResourceTemplates&#xA;    ChartsDir --&gt; TemplatingEngine&#xA;    ValueProcessor --&gt; TemplatingEngine&#xA;    TemplatingEngine --&gt; RenderedManifests[&#34;Rendered Manifests&#34;]&#xA;&#xA;    HelmInstall --&gt; ValueProcessor&#xA;    HelmInstall --&gt; TemplatingEngine&#xA;    HelmInstall --&gt; K8sClient&#xA;    K8sClient --&gt; APIServer&#xA;    APIServer --&gt; DeployedResources&#xA;    APIServer --&gt; ReleaseObject&#xA;    ReleaseTracker --&gt; ReleaseObject&#xA;&#xA;    HelmTemplate --&gt; ValueProcessor&#xA;    HelmTemplate --&gt; TemplatingEngine&#xA;    TemplatingEngine --&gt; UserOutput[&#34;User/Terminal&#34;]&#xA;&#xA;    HelmUpgrade --&gt; ValueProcessor&#xA;    HelmUpgrade --&gt; TemplatingEngine&#xA;    HelmUpgrade --&gt; K8sClient&#xA;&#xA;    HelmLint --&gt; HelmChart&#xA;    HelmPackage --&gt; HelmChart&#xA;&#xA;    classDef chart fill:#f9f,stroke:#333,stroke-width:2px&#xA;    classDef process fill:#bbf,stroke:#333,stroke-width:2px&#xA;    classDef k8s fill:#dfd,stroke:#333,stroke-width:2px&#xA;    classDef helm fill:#ffd,stroke:#333,stroke-width:2px&#xA;&#xA;    class ChartYaml,ValuesYaml,TemplatesDir,ChartsDir,HelpersTpl,ResourceTemplates,NotesTxt,TestDir chart&#xA;    class ValueProcessor,TemplatingEngine,RenderedManifests,ReleaseTracker,K8sClient process&#xA;    class APIServer,DeployedResources,ReleaseObject k8s&#xA;    class HelmClient,HelmEngine helm&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script&gt;&#xA;  document.addEventListener(&#39;DOMContentLoaded&#39;, function() {&#xA;    if (typeof mermaid !== &#39;undefined&#39;) {&#xA;      mermaid.initialize({&#xA;        startOnLoad: true,&#xA;        theme: &#39;dark&#39;,&#xA;        flowchart: {&#xA;          useMaxWidth: false,&#xA;          htmlLabels: true&#xA;        },&#xA;        er: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        sequence: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        gantt: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        pie: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        class: {&#xA;          useMaxWidth: false&#xA;        }&#xA;      });&#xA;      &#xA;      &#xA;      mermaid.init(undefined, document.querySelectorAll(&#39;.mermaid&#39;));&#xA;      &#xA;      setTimeout(function() {&#xA;        document.querySelectorAll(&#39;.mermaid svg&#39;).forEach(function(svg) {&#xA;          svg.style.maxWidth = &#39;none&#39;;&#xA;          svg.style.width = &#39;100%&#39;;&#xA;          svg.style.minWidth = &#39;800px&#39;;&#xA;        });&#xA;      }, 500);&#xA;    } else {&#xA;      console.error(&#39;Mermaid library not loaded!&#39;);&#xA;      &#xA;      var script = document.createElement(&#39;script&#39;);&#xA;      script.src = &#39;https://cdn.jsdelivr.net/npm/mermaid@latest/dist/mermaid.min.js&#39;;&#xA;      script.onload = function() {&#xA;        mermaid.initialize({&#xA;          startOnLoad: true,&#xA;          theme: &#39;dark&#39;&#xA;        });&#xA;        mermaid.init(undefined, document.querySelectorAll(&#39;.mermaid&#39;));&#xA;      };&#xA;      document.head.appendChild(script);&#xA;    }&#xA;  });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;style&gt;&#xA;  .mermaid-wrapper {&#xA;    margin: 20px 0;&#xA;    padding: 10px;&#xA;    background-color: #282a36;&#xA;    border-radius: 5px;&#xA;    overflow-x: auto;&#xA;    width: 100%;&#xA;  }&#xA;  &#xA;  .mermaid {&#xA;    font-family: &#39;Fira Sans&#39;, sans-serif;&#xA;    font-size: 16px;&#xA;    overflow: visible;&#xA;    display: inline-block;&#xA;    min-width: 100%;&#xA;  }&#xA;&#xA;  .mermaid svg {&#xA;    min-width: 100%;&#xA;    max-width: none !important;&#xA;    height: auto;&#xA;  }&#xA;&lt;/style&gt;</description>
    </item>
  </channel>
</rss>
