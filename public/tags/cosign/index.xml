<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cosign on silent.engineer</title>
    <link>http://localhost:62955/tags/cosign/</link>
    <description>Recent content in Cosign on silent.engineer</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 May 2025 07:36:00 -0400</lastBuildDate>
    <atom:link href="http://localhost:62955/tags/cosign/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Signing Artifacts in Larger CI/CD ecosystems</title>
      <link>http://localhost:62955/posts/supply-chain-signing/</link>
      <pubDate>Tue, 13 May 2025 07:36:00 -0400</pubDate>
      <guid>http://localhost:62955/posts/supply-chain-signing/</guid>
      <description>&lt;h2 id=&#34;supply-chain-security-with-digital-signatures&#34;&gt;Supply Chain Security with Digital Signatures&lt;/h2&gt;&#xA;&lt;p&gt;Implementing digital signatures in CI/CD pipelines provides a crucial layer of verification and authenticity for artifacts as they move through your development ecosystem.&lt;/p&gt;&#xA;&lt;h2 id=&#34;diagram-artifact-signing-process-flow&#34;&gt;Diagram: Artifact Signing Process Flow&lt;/h2&gt;&#xA;&lt;div class=&#34;mermaid-wrapper&#34;&gt;&#xA;  &lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram&#xA;    participant Developer&#xA;    participant BuildSystem&#xA;    participant Registry&#xA;    participant PlatformTeam&#xA;    participant Customer&#xA;&#xA;    Developer-&gt;&gt;BuildSystem: 1. Commit Code (triggers build)&#xA;    Note left of Developer: &#34;The Kitchen&#34; â€“ developers codebase&#xA;    BuildSystem-&gt;&gt;BuildSystem: 2. Build Image + Generate Attestation&#xA;    BuildSystem-&gt;&gt;Registry: 3. Push Image (tag:dev)&#xA;    BuildSystem-&gt;&gt;Registry: 4. Sign Image (cosign + dev.key)&#xA;    BuildSystem-&gt;&gt;Registry: 5. Attach Provenance Attestation (signed)&#xA;&#xA;    PlatformTeam-&gt;&gt;Registry: 6. Pull Image &amp; Attestation&#xA;    PlatformTeam-&gt;&gt;PlatformTeam: 7. Verify Developer Signature&#xA;    PlatformTeam-&gt;&gt;PlatformTeam: 8. Verify Attestation (cosign verify-attestation)&#xA;    Note right of PlatformTeam: Checks build provenance:&lt;br/&gt;- Source repo&lt;br/&gt;- Build command&lt;br/&gt;- Commit hash&lt;br/&gt;- Builder identity&#xA;&#xA;    alt Attestation Valid&#xA;        PlatformTeam-&gt;&gt;Registry: 9. Sign with Platform Key (prod-tag)&#xA;    else Attestation Invalid&#xA;        PlatformTeam--&gt;&gt;Developer: ðŸ”’ Reject: Build provenance mismatch&#xA;    end&#xA;&#xA;    Customer-&gt;&gt;Registry: 10. Pull Image (prod-tag)&#xA;    Customer-&gt;&gt;Customer: 11. Verify Platform Signature (platform.pub)&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script&gt;&#xA;  document.addEventListener(&#39;DOMContentLoaded&#39;, function() {&#xA;    if (typeof mermaid !== &#39;undefined&#39;) {&#xA;      mermaid.initialize({&#xA;        startOnLoad: true,&#xA;        theme: &#39;dark&#39;,&#xA;        flowchart: {&#xA;          useMaxWidth: false,&#xA;          htmlLabels: true&#xA;        },&#xA;        er: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        sequence: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        gantt: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        pie: {&#xA;          useMaxWidth: false&#xA;        },&#xA;        class: {&#xA;          useMaxWidth: false&#xA;        }&#xA;      });&#xA;    } else {&#xA;      console.error(&#39;Mermaid library not loaded!&#39;);&#xA;      &#xA;      var script = document.createElement(&#39;script&#39;);&#xA;      script.src = &#39;https://cdn.jsdelivr.net/npm/mermaid@latest/dist/mermaid.min.js&#39;;&#xA;      script.onload = function() {&#xA;        mermaid.initialize({&#xA;          startOnLoad: true,&#xA;          theme: &#39;dark&#39;&#xA;        });&#xA;        mermaid.init(undefined, document.querySelectorAll(&#39;.mermaid&#39;));&#xA;      };&#xA;      document.head.appendChild(script);&#xA;    }&#xA;  });&#xA;&lt;/script&gt;&#xA;&#xA;&lt;style&gt;&#xA;  .mermaid-wrapper {&#xA;    margin: 20px 0;&#xA;    padding: 10px;&#xA;    background-color: #282a36;&#xA;    border-radius: 5px;&#xA;    overflow-x: auto;&#xA;    width: 100%;&#xA;  }&#xA;  &#xA;  .mermaid {&#xA;    font-family: &#39;Fira Sans&#39;, sans-serif;&#xA;    font-size: 16px;&#xA;    overflow: visible;&#xA;    display: inline-block;&#xA;    min-width: 100%;&#xA;  }&#xA;&#xA;  .mermaid svg {&#xA;    min-width: 100%;&#xA;    max-width: none !important;&#xA;    height: auto;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;p&gt;The diagram above illustrates the flow of artifacts through a typical CI/CD pipeline, highlighting the signing and verification steps.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Signing Helm Charts with Cosign</title>
      <link>http://localhost:62955/posts/cosign-helm-chart/</link>
      <pubDate>Tue, 13 May 2025 07:06:00 -0400</pubDate>
      <guid>http://localhost:62955/posts/cosign-helm-chart/</guid>
      <description>&lt;h2 id=&#34;what-is-cosign&#34;&gt;What is Cosign?&lt;/h2&gt;&#xA;&lt;p&gt;Cosign is a tool developed by the Sigstore project that provides a simple way to sign and verify software artifacts. It&amp;rsquo;s particularly useful for container images, Helm charts, and other software artifacts in the supply chain. Cosign uses keyless signing by default, which means it doesn&amp;rsquo;t require you to manage private keys. Instead, it leverages OpenID Connect (OIDC) for authentication and uses ephemeral keys for signing.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Before we begin, ensure you have the following tools installed:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
